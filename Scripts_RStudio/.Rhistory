draw(model.bayes.gam1)
model.bayes.gam
smooth_plot <- marginal_smooths(model.bayes.gam1)
summary(model.bayes.gam1)
library("brms")
smooth_plot <- marginal_smooths(model.bayes.gam1)
plot(smooth_plot)
stancode(model.bayes.gam1)
smooth_plot$`mu: s(PM10)`
rm(model.bayes.gam)
library("ggplot2")
library("rstan")
parallel::detectCores()
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
rm(list = ls())
gc()
# clear Rstudio's memory
rm(list = ls())
gc()
# load up packages
library("brms")
library("mgcv")
library("ggplot2")
library("schoenberg")
library("rstan")
# find out how many cores are on you machine as this will be needed in the brms()
parallel::detectCores()
# configure Stan
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
# load up the data
respiratory_data <- read.csv("/Users/anwarmusah/Desktop/Respiratory_Illness.csv")
# start timer gauge how long it takes to run a GAM
ptm <- proc.time()
# run a GAM model
model.bayes.gam <- brm(bf(Overall ~ s(PM10) + s(CO) + s(NO2)),
data = respiratory_data,
family = poisson(link = "log"),
cores = 6,
iter = 8000,
warmup = 1000,
thin = 10,
refresh = 0,
control = list(adapt_delta = 0.99))
# Stop the clock
proc.time() - ptm
# Report results
summary(model.bayes.gam)
535.230/60
?brm
get_prior(Overall ~ s(PM10) + s(CO) + s(NO2))
get_prior(Overall ~ s(PM10) + s(CO) + s(NO2), data = respiratory_data, family = poisson())
prior.list <- get_prior(Overall ~ s(PM10) + s(CO) + s(NO2), data = respiratory_data, family = poisson())
# start timer gauge how long it takes to run a GAM
ptm <- proc.time()
# run a GAM model
model.bayes.gam <- brm(bf(Overall ~ s(PM10) + s(CO) + s(NO2)),
data = respiratory_data,
family = poisson(),
prior = prior.list,
cores = 6,
iter = 8000,
warmup = 1000,
thin = 10,
refresh = 0,
control = list(adapt_delta = 0.99))
# Stop the clock
proc.time() - ptm
564.302/60
# Report results
summary(model.bayes.gam)
# The predicted effect of PM10
smooth_plot <- marginal_smooths(model.bayes.gam)
smooth_plot <- conditional_smooths(model.bayes.gam)
smooth_plot
smooth_plot$`mu: s(PM10)`
plot(smooth_plot)
pp_check(model.bayes.gam)
pp_check(model.bayes.gam, type="dens_overlay")
pp_check(model.bayes.gam, type="ecdf_overlay")
beta_coef_PM10 <- data.frame(beta = smooth_plot$`mu: s(PM10)`[4])
View(beta_coef_PM10)
beta_coef_PM10 <- data.frame(beta = smooth_plot$`mu: s(PM10)`[4],
lower = smooth_plot$`mu: s(PM10)`[6], lower = smooth_plot$`mu: s(PM10)`[7])
beta_coef_PM10 <- data.frame(pm10 = smooth_plot$`mu: s(PM10)`[1], beta = smooth_plot$`mu: s(PM10)`[4],
lower = smooth_plot$`mu: s(PM10)`[6], lower = smooth_plot$`mu: s(PM10)`[7])
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__)
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
abline(h=0, lty="-", color ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
abline(h=0, lty="-", col ="red")
abline(h=0,col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
abline(h=0, lty = "-", col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
abline(h=0, lty = "-", col ="red")
abline(h=0, lty = "dashed", col ="red")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="green")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylimit = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
abline(h=0, lty = "dashed", col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
polygon(c(beta_coef_PM10$PM10, beta_coef_PM10$lower__),
c(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey"),
col = "grey")
polygon(c(beta_coef_PM10$PM10, beta_coef_PM10$lower__),
c(beta_coef_PM10$PM10, beta_coef_PM10$upper__),
col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
polygon(c(beta_coef_PM10$PM10, beta_coef_PM10$lower__),
c(beta_coef_PM10$PM10, beta_coef_PM10$upper__),
col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
polygon(c(beta_coef_PM10$PM10, beta_coef_PM10$lower__),
c(beta_coef_PM10$PM10, beta_coef_PM10$upper__),
col="grey")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
abline(h=0, lty = "dashed", col ="red")
plot(beta_coef_PM10$PM10, exp(beta_coef_PM10$estimate__), type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim = c(-3, 4),
main = "GAM: Impact Respiratory burden in Turin")
plot(beta_coef_PM10$PM10, exp(beta_coef_PM10$estimate__), type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
plot(beta_coef_PM10$PM10, exp(beta_coef_PM10$estimate__), type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, exp(beta_coef_PM10$upper__),col="grey")
lines(beta_coef_PM10$PM10, exp(beta_coef_PM10$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
# NO2
beta_coef_NO2 <- data.frame(no2 = smooth_plot$`mu: s(NO2)`[1], beta = smooth_plot$`mu: s(NO2)`[4],
lower = smooth_plot$`mu: s(NO2)`[6], lower = smooth_plot$`mu: s(NO2)`[7])
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$upper__),col="grey")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
# NO2
beta_coef_NO2 <- data.frame(no2 = smooth_plot$`mu: s(NO2)`[1], beta = smooth_plot$`mu: s(NO2)`[4],
lower = smooth_plot$`mu: s(NO2)`[6], lower = smooth_plot$`mu: s(NO2)`[7])
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$upper__),col="grey")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(0, 4)
main = "GAM: Impact Respiratory burden in Turin")
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(0, 4),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$upper__),col="grey")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(0, 6),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$upper__),col="grey")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, exp(beta_coef_NO2$estimate__), type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(0, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$upper__),col="grey")
lines(beta_coef_NO2$NO2, exp(beta_coef_NO2$lower__),col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
beta_coef_CO <- data.frame(co = smooth_plot$`mu: s(CO)`[1], beta = smooth_plot$`mu: s(CO)`[4],
lower = smooth_plot$`mu: s(CO)`[6], lower = smooth_plot$`mu: s(CO)`[7])
View(beta_coef_CO)
plot(beta_coef_CO$CO, exp(beta_coef_CO$estimate__), type="l",
ylab = "Coefficient for CO", xlab="Observed CO", ylim=c(0, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_CO$CO, exp(beta_coef_CO$upper__),col="grey")
lines(beta_coef_CO$CO, exp(beta_coef_CO$lower__),col="grey")
abline(h=1, lty = "dashed", col ="red")
exp(3.4600055)
dev.off()
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim=c(0, 8)
main = "GAM: Impact Respiratory burden in Turin")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim=c(0, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim=c(0, 5),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim=c(-4, 5),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
# NO2
beta_coef_NO2 <- data.frame(no2 = smooth_plot$`mu: s(NO2)`[1], beta = smooth_plot$`mu: s(NO2)`[4],
lower = smooth_plot$`mu: s(NO2)`[6], lower = smooth_plot$`mu: s(NO2)`[7])
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(0, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2",
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
View(beta_coef_NO2)
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(-1, 3),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
# Add null value
abline(h=1, lty = "dashed", col ="red")
plot(beta_coef_CO$CO, beta_coef_CO$estimate__, type="l",
ylab = "Coefficient for CO", xlab="Observed CO", ylim=c(0, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_CO$CO, beta_coef_CO$upper__,col="grey")
lines(beta_coef_CO$CO, beta_coef_CO$lower__,col="grey")
plot(beta_coef_CO$CO, beta_coef_CO$estimate__, type="l",
ylab = "Coefficient for CO", xlab="Observed CO", ylim=c(-8, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_CO$CO, beta_coef_CO$upper__,col="grey")
lines(beta_coef_CO$CO, beta_coef_CO$lower__,col="grey")
# Add null value
abline(h=0, lty = "dashed", col ="red")
dev.off
dev.off()
plot(beta_coef_PM10$PM10, beta_coef_PM10$estimate__, type="l",
ylab = "Coefficient for PM10", xlab="Observed PM10", ylim=c(-4, 5),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_PM10$PM10, beta_coef_PM10$upper__,col="grey")
lines(beta_coef_PM10$PM10, beta_coef_PM10$lower__,col="grey")
# Add null value
abline(h=0, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(-1, 3),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
# Add null value
abline(h=0, lty = "dashed", col ="red")
plot(beta_coef_NO2$NO2, beta_coef_NO2$estimate__, type="l",
ylab = "Coefficient for NO2", xlab="Observed NO2", ylim=c(-2, 3),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_NO2$NO2, beta_coef_NO2$upper__,col="grey")
lines(beta_coef_NO2$NO2, beta_coef_NO2$lower__,col="grey")
# Add null value
abline(h=0, lty = "dashed", col ="red")
plot(beta_coef_CO$CO, beta_coef_CO$estimate__, type="l",
ylab = "Coefficient for CO", xlab="Observed CO", ylim=c(-8, 8),
main = "GAM: Impact Respiratory burden in Turin")
lines(beta_coef_CO$CO, beta_coef_CO$upper__,col="grey")
lines(beta_coef_CO$CO, beta_coef_CO$lower__,col="grey")
# Add null value
abline(h=0, lty = "dashed", col ="red")
# Report results
summary(model.bayes.gam)
stancode(model.bayes.gam)
summary(model.bayes.gam)
stancode(model.bayes.gam)
#Set seed so your answers are all the same
set.seed(9)
# Sample Per class room people
n1 <- 50; n2 <- 50; n3 <- 50; n4 <- 50
N<-n1+n2+n3+n4 # Total N
# Uniform distrobution of ActiveTime per classroom
X1 <- runif(n1, 0, 1); X2 <- runif(n2, 0, 1)
X3 <- runif(n3, 0, 1); X4 <- runif(n4, 0, 1)
# Uniform distrobution of support per classroom
Z1 <- runif(n1, 0, 1); Z2 <- runif(n2, 0, 1)
Z3 <- runif(n3, 0, 1); Z4 <- runif(n4, 0, 1)
# Intercepts per classroom
B0.1 <- 80; B0.2 <- 75
B0.3 <- 65; B0.4 <- 68
# Same slope for ActiveTime per classroom + Noise
B1 <- rnorm(n1, 10, sd=2.5); B2 <- rnorm(n2, 10, sd=2.5)
B3 <- rnorm(n3, 10, sd=2.5); B4 <- rnorm(n4, 10, sd=2.5)
# different slope for support per classroom + Noise
g1 <- rnorm(n1, 10, sd=2.5); g2 <- rnorm(n2, 5, sd=2.5)
g3 <- rnorm(n3, -5, sd=2.5); g4 <- rnorm(n4, 2, sd=2.5)
# Same interaction between ActiveTime*support support per classroom + Noise
f1<- rnorm(n3, 15, sd=2.5); f2<- rnorm(n3, 15, sd=2.5)
f3<- rnorm(n3, 15, sd=2.5); f4<- rnorm(n3, 15, sd=2.5)
# noise per student within each classroom
e1 <- rnorm(n1, 0, sd=2.5); e2 <- rnorm(n2, 0, sd=2.5)
e3 <- rnorm(n3, 0, sd=2.5); e4 <- rnorm(n4, 0, sd=2.5)
# Our equation to  create Y for each classroom
Y1 = B1*scale(X1,scale=F)+g1*Z1+f1*scale(X1,scale=F)*scale(Z1,scale=F) + B0.1 + e1
Y2 = B2*scale(X2,scale=F)+g2*Z2+f2*scale(X2,scale=F)*scale(Z2,scale=F) + B0.2 + e2
Y3 = B3*scale(X3,scale=F)+g3*Z3+f3*scale(X3,scale=F)*scale(Z3,scale=F) + B0.3 + e3
Y4 = B4*scale(X4,scale=F)+g4*Z4+f4*scale(X4,scale=F)*scale(Z4,scale=F) + B0.4 + e4
# Merge classrooms into 1 data.frame
MLM.Data<-data.frame(Math=c(Y1,Y2,Y3,Y4),ActiveTime=c(X1,X2,X3,X4),Support=c(Z1,Z2,Z3,Z4),
Classroom=c(rep("C1",n1),rep("C2",n2),rep("C3",n3),rep("C4",n4)),
Told=c(rep("Works",n1),rep("Works",n2),
rep("Experimental",n3),rep("Experimental",n4)),
StudentID=as.factor(1:N))
View(MLM.Data)
MLM.Data$GroupID <- as.numeric(as.factor(MLM.Data$Classroom))
Maths_dataset <- MLM.Data
nrow(Maths_dataset)
unique(Maths_dataset$GroupID)
max(unique(Maths_dataset$GroupID))
Maths_dataset$GroupID
as.integer(Maths_dataset$GroupID)
stan.dataset <- list(N=nrow(Maths_dataset),
CL=max(unique(Maths_dataset$GroupID)),
ClassroomID=as.integer(Maths_dataset$GroupID),
k=2,
MathScore=Maths_dataset$Math,
ActiveTime=Maths_dataset$ActiveTime,
Supportive=Maths_dataset$Support
)
setwd("/Volumes/Anwar-HHD/GEOG0125/Github/2022_2023/Scripts_RStudio")
library('rstan')
library('tidybayes')
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
# We can run the Bayesian model using the Stan() function
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE, seed = 72182605)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE, seed = 72182605)
# Stop the clock
proc.time() - ptm
bayesian.hierarchical.model = stan("Maths_Activity_study.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
bayesian.hierarchical.model
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# view results
bayesian.hierarchical.model
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
Maths_dataset$Intervention <- ifelse(Maths_dataset$Told == "Works", 1, 0)
View(Maths_dataset)
X=Maths_dataset[,c(2,3,8)]
View(X)
View(X)
# convert only variable that are factor variables
X <- model.matrix(~ 0 + ActiveTime + Support + Intervention, data = selectedVariables)
# convert only variable that are factor variables
X <- model.matrix(~ 0 + ActiveTime + Support + Intervention, data = selectedVariables)
selectedVariables=Maths_dataset[,c(2,3,8)]
# convert only variable that are factor variables
X <- model.matrix(~ 0 + ActiveTime + Support + Intervention, data = selectedVariables)
# see conversion
View(X)
# convert only variable that are factor variables
X <- model.matrix(~ 1 + ActiveTime + Support + Intervention, data = selectedVariables)
# see conversion
View(X)
colnames(X)[1] <- "gamma"
colnames(X)[1] <- "gamma00"
View(X)
stan.dataset <- list(N=nrow(Maths_dataset),
CL=max(unique(Maths_dataset$GroupID)),
ClassroomID=as.integer(Maths_dataset$GroupID),
k=4,
MathScore=Maths_dataset$Math,
X=X
)
selectedVariables=Maths_dataset[,c(2,3)]
# convert only variable that are factor variables
X <- model.matrix(~ 1 + ActiveTime + Support + Intervention, data = selectedVariables)
selectedVariables=Maths_dataset[,c(2,3)]
# convert only variable that are factor variables
X <- model.matrix(~ 1 + ActiveTime + Support, data = selectedVariables)
colnames(X)[1] <- "gamma00"
# see conversion
View(X)
stan.dataset <- list(N=nrow(Maths_dataset),
CL=max(unique(Maths_dataset$GroupID)),
ClassroomID=as.integer(Maths_dataset$GroupID),
k=3,
MathScore=Maths_dataset$Math,
X=X
)
stan.dataset <- list(N=nrow(Maths_dataset),
CL=max(unique(Maths_dataset$GroupID)),
ClassroomID=as.integer(Maths_dataset$GroupID),
k=3,
MathScore=Maths_dataset$Math,
X=X
)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
stan.dataset <- list(N=nrow(Maths_dataset),
CL=max(unique(Maths_dataset$GroupID)),
ClassroomID=as.integer(Maths_dataset$GroupID),
k=3,
MathScore=Maths_dataset$Math,
X=X
)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
# Start the clock
ptm <- proc.time()
# compile linear regression model for now
bayesian.hierarchical.model_2 = stan("Maths_Activity_study_slope.stan", data=stan.dataset, iter=10000, chains=6, verbose = FALSE)
